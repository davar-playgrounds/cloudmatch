akka {
//  loggers = [de.heikoseeberger.akkalog4j.Log4jLogger]
//  logging-filter = de.heikoseeberger.akkalog4j.Log4jLoggingFilter
  loglevel = info
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  actor {
    provider = cluster
  }

  cluster {
    # Minimum required number of members before the leader changes member status
    # of 'Joining' members to 'Up'. Typically used together with
    # 'Cluster.registerOnMemberUp' to defer some action, such as starting actors,
    # until the cluster has reached a certain size.
    # Set to 2, so that during a rolling deployment at least two nodes are in `Joining` or `Up` status before promoting
    # the new nodes to `Up`.
    min-nr-of-members = 2

    # The joining of given seed nodes will by default be retried indefinitely until
    # a successful join. That process can be aborted if unsuccessful by defining this
    # timeout. When aborted it will run CoordinatedShutdown, which by default will
    # terminate the ActorSystem. CoordinatedShutdown can also be configured to exit
    # the JVM. It is useful to define this timeout if the seed-nodes are assembled
    # dynamically and a restart with new seed-nodes should be tried after unsuccessful
    # attempts.
    # Setting the value to 30 seconds is a recommendation of: https://doc.akka.io/docs/akka-management/current/bootstrap/index.html#recommended-configuration
    # After the shutdown, Kubernetes will restart your node and the operation will (presumably) eventually succeed.
    shutdown-after-unsuccessful-join-seed-nodes = 30s
  }

  # CoordinatedShutdown will run the tasks that are added to these
  # phases. The phases can be ordered as a DAG by defining the
  # dependencies between the phases.
  # Each phase is defined as a named config section with the
  # following optional properties:
  # - timeout=15s: Override the default-phase-timeout for this phase.
  # - recover=off: If the phase fails the shutdown is aborted
  #                and depending phases will not be executed.
  # depends-on=[]: Run the phase after the given phases
  coordinated-shutdown {
    # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
    # if this is set to 'on'. It is done after termination of the
    # ActorSystem if terminate-actor-system=on, otherwise it is done
    # immediately when the last phase is reached.
    exit-jvm = on

    default-phase-timeout = 10 seconds
  }

  # Akka Bootstrap Discovery settings
  discovery {
    # Kubernetes API is used as discovery method
    # https://developer.lightbend.com/docs/akka-management/current/discovery/index.html#discovery-method-kubernetes-api
    method = kubernetes-api

    kubernetes-api {
      # Namespace to query for pods
      # The lookup needs to know which namespace to look in.
      # By default, this will be detected by reading the namespace from the service account secret,
      # in /var/run/secrets/kubernetes.io/serviceaccount/namespace
      # Namespace can be overriden with `pod-namespace` key.
      # pod-namespace = "default"

      # Selector value to query pod API with.
      # `%s` will be replaced with the configured effective name, which defaults to the actor system name
      # Default: "app=%s"
      # pod-label-selector = "app=%s"

      # The name of the akka management port
      # Default: "management"
      # pod-port-name = "management"
    }
  }

  # Akka Management settings
  management {
    contact-point {
      # currently this port HAS TO be the same as the `akka.management.http.port`
      # it would not have to be once we implement the SRV record watching, since then we could potentially
      # get the ports from the DNS records.
      fallback-port = 8558
    }

    cluster.bootstrap {
      contact-point-discovery {
        # The smallest number of contact points that need to be discovered before the bootstrap process can start.
        # For optimal safety during cluster formation, you may want to set these value to the number of initial
        # nodes that you know will participate in the cluster (e.g. the value of `spec.replicas` as set in your kubernetes config.
        required-contact-point-nr = 3

        # Amount of time for which a discovery observation must remain "stable"
        # (i.e. not change list of discovered contact-points) before a join decision can be made.
        # This is done to decrease the likelyhood of performing decisions on fluctuating observations.
        #
        # This timeout represents a tradeoff between safety and quickness of forming a new cluster.
        stable-margin = 5 seconds
      }
    }
  }

  remote {
    # Disable event logging
    # https://doc.akka.io/docs/akka/2.5/scala/remoting.html#remoting-sample
    log-remote-lifecycle-events = off

    artery {
      enabled   = on
      transport = tcp
      canonical.port = 25520
    }
  }
}

cloudmatch {
  # can be 'node' or 'listener'
  # default = node
  role = node
  role = ${?ROLE}

  max-devices-per-node = 2
  db-base-url = "http://localhost:80"
}


